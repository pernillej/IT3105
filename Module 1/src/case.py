import numpy as np
import util.tflowtools as TFT
import data.mnist_basics as mnist

DATA_SET_FUNCTIONS = {
        "parity": lambda: TFT.gen_all_parity_cases(num_bits=10, double=True),
        "symmetry": lambda: TFT.gen_symvect_cases(vlen=101, count=2000),
        "one-hot-autoencoder": lambda: TFT.gen_all_one_hot_cases(len=8),
        "dense-autoencoder": lambda: TFT.gen_dense_autoencoder_cases(count=2000, size=8, dr=(0.4, 0.7)),
        "bit-counter": lambda: TFT.gen_vector_count_cases(num=500, size=15),
        "segment-counter": lambda: TFT.gen_segmented_vector_cases(count=1000, minsegs=0, maxsegs=8, vectorlen=25)
    }


class Case:
    """ For managing cases """

    def __init__(self, data_source, validation_fraction, test_fraction, case_fraction=1.0):
        self.data_source = data_source
        self.case_fraction = case_fraction
        self.validation_fraction = validation_fraction
        self.test_fraction = test_fraction
        self.training_fraction = 1 - (validation_fraction + test_fraction)

        self.generate_cases()
        self.organize_cases()

    def generate_cases(self):
        if self.data_source == "mnist":  # TODO
            return
        elif self.data_source == "wine":
            return self.read_from_file("./data/winequality_red.txt")
        elif self.data_source == "glass":
            return self.read_from_file("./data/glass.txt")
        elif self.data_source == "yeast":
            return self.read_from_file("./data/yeast.txt")
        elif self.data_source == "hackers-choice":  # TODO - Chose dataset
            return
        else:  # For cases to be generated by tflowtools
            self.cases = DATA_SET_FUNCTIONS[self.data_source]()

    def organize_cases(self):
        cases = np.array(self.cases)
        np.random.shuffle(cases)  # Randomly shuffle all cases
        if self.case_fraction != 1.0:  # Reduce huge data files
            sep = round(len(self.cases) * self.case_fraction)
            cases = cases[0:sep]
        training_sep = round(len(cases) * self.training_fraction)
        validation_sep = training_sep + round(len(cases) * self.validation_fraction)
        self.training_cases = cases[0:training_sep]
        self.validation_cases = cases[training_sep:validation_sep]
        self.testing_cases = cases[validation_sep:]

    def read_from_file(self, filename):  # TODO
        return

    ''' Getters '''

    def get_training_cases(self): return self.training_cases

    def get_validation_cases(self): return self.validation_cases

    def get_testing_cases(self): return self.testing_cases


